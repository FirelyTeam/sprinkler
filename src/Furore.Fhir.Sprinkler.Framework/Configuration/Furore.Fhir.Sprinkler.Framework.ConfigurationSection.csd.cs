//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Furore.Fhir.Sprinkler.Framework.Configuration
{
    
    
    /// <summary>
    /// The TestAssembliesConfiguration Configuration Section.
    /// </summary>
    public partial class TestAssembliesConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the TestAssembliesConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string TestAssembliesConfigurationSectionName = "testAssembliesConfiguration";
        
        /// <summary>
        /// The XML path of the TestAssembliesConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string TestAssembliesConfigurationSectionPath = "testAssembliesConfiguration";
        
        /// <summary>
        /// Gets the TestAssembliesConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembliesConfiguration Instance
        {
            get
            {
                return ((global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembliesConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembliesConfiguration.TestAssembliesConfigurationSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembliesConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembliesConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region TestAssemblies Property
        /// <summary>
        /// The XML name of the <see cref="TestAssemblies"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string TestAssembliesPropertyName = "testAssemblies";
        
        /// <summary>
        /// Gets or sets the TestAssemblies.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The TestAssemblies.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembliesConfiguration.TestAssembliesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssemblies TestAssemblies
        {
            get
            {
                return ((global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssemblies)(base[global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembliesConfiguration.TestAssembliesPropertyName]));
            }
            set
            {
                base[global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembliesConfiguration.TestAssembliesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Furore.Fhir.Sprinkler.Framework.Configuration
{
    
    
    /// <summary>
    /// A collection of TestAssembly instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssemblies.TestAssemblyPropertyName)]
    public partial class TestAssemblies : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string TestAssemblyPropertyName = "testAssembly";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssemblies.TestAssemblyPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssemblies.TestAssemblyPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly)(element)).AssemblyName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly this[int index]
        {
            get
            {
                return ((global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> with the specified key.
        /// </summary>
        /// <param name="assemblyName">The key of the <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly this[object assemblyName]
        {
            get
            {
                return ((global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly)(base.BaseGet(assemblyName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="testAssembly">The <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly testAssembly)
        {
            base.BaseAdd(testAssembly);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="testAssembly">The <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly testAssembly)
        {
            base.BaseRemove(this.GetElementKey(testAssembly));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly GetItemAt(int index)
        {
            return ((global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> with the specified key.
        /// </summary>
        /// <param name="assemblyName">The key of the <see cref="global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly GetItemByKey(string assemblyName)
        {
            return ((global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly)(base.BaseGet(((object)(assemblyName)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Furore.Fhir.Sprinkler.Framework.Configuration
{
    
    
    /// <summary>
    /// The TestAssembly Configuration Element.
    /// </summary>
    public partial class TestAssembly : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AssemblyName Property
        /// <summary>
        /// The XML name of the <see cref="AssemblyName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string AssemblyNamePropertyName = "assemblyName";
        
        /// <summary>
        /// Gets or sets the AssemblyName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The AssemblyName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly.AssemblyNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string AssemblyName
        {
            get
            {
                return ((string)(base[global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly.AssemblyNamePropertyName]));
            }
            set
            {
                base[global::Furore.Fhir.Sprinkler.Framework.Configuration.TestAssembly.AssemblyNamePropertyName] = value;
            }
        }
        #endregion
    }
}
